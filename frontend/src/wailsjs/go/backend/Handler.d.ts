// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT
import {wallet} from '../models';
import {backend} from '../models';
import {config} from '../models';
import {network} from '../models';

export function AnnotateKey(arg1:wallet.AnnotateKeyRequest):Promise<Error>;

export function CheckVersion():Promise<backend.CheckVersionResponse>;

export function ClearSentTransaction(arg1:backend.ClearSentTransactionRequest):Promise<Error>;

export function ConsentToTransaction(arg1:backend.ConsentToTransactionRequest):Promise<Error>;

export function CreateWallet(arg1:wallet.CreateWalletRequest):Promise<wallet.CreateWalletResponse>;

export function DeleteWallet(arg1:backend.DeleteWalletRequest):Promise<Error>;

export function DescribeKey(arg1:wallet.DescribeKeyRequest):Promise<wallet.DescribeKeyResponse>;

export function GenerateKey(arg1:wallet.GenerateKeyRequest):Promise<wallet.GenerateKeyResponse>;

export function GetAppConfig():Promise<config.Config>;

export function GetConsentRequest(arg1:backend.GetConsentRequestRequest):Promise<backend.ConsentRequest>;

export function GetConsoleState():Promise<backend.GetServiceStateResponse>;

export function GetNetworkConfig(arg1:string):Promise<network.Network>;

export function GetServiceState():Promise<backend.GetServiceStateResponse>;

export function GetTokenDAppState():Promise<backend.GetServiceStateResponse>;

export function GetVersion():Promise<backend.GetVersionResponse>;

export function ImportNetwork(arg1:network.ImportNetworkFromSourceRequest):Promise<network.ImportNetworkFromSourceResponse>;

export function ImportWallet(arg1:wallet.ImportWalletRequest):Promise<wallet.ImportWalletResponse>;

export function InitialiseApp(arg1:backend.InitialiseAppRequest):Promise<Error>;

export function IsAppInitialised():Promise<boolean>;

export function IsolateKey(arg1:wallet.IsolateKeyRequest):Promise<wallet.IsolateKeyResponse>;

export function ListConsentRequests():Promise<backend.ListConsentRequestsResponse>;

export function ListKeys(arg1:wallet.ListKeysRequest):Promise<wallet.ListKeysResponse>;

export function ListNetworks():Promise<network.ListNetworksResponse>;

export function ListSentTransactions():Promise<backend.ListSentTransactionsResponse>;

export function ListWallets():Promise<wallet.ListWalletsResponse>;

export function SaveNetworkConfig(arg1:network.Network):Promise<boolean>;

export function SearchForExistingConfiguration():Promise<backend.SearchForExistingConfigurationResponse>;

export function SignMessage(arg1:wallet.SignMessageRequest):Promise<wallet.SignMessageResponse>;

export function StartConsole(arg1:backend.StartServiceRequest):Promise<boolean>;

export function StartService(arg1:backend.StartServiceRequest):Promise<boolean>;

export function StartTokenDApp(arg1:backend.StartServiceRequest):Promise<boolean>;

export function StopConsole():Promise<boolean>;

export function StopService():Promise<boolean>;

export function StopTokenDApp():Promise<boolean>;

export function TaintKey(arg1:wallet.TaintKeyRequest):Promise<Error>;

export function UntaintKey(arg1:wallet.UntaintKeyRequest):Promise<Error>;

export function UpdateAppConfig(arg1:config.Config):Promise<Error>;
