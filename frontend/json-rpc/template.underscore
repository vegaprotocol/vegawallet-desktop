// Code generated by @open-rpc/generator. DO NOT EDIT.
import { nanoid } from 'nanoid'
import { camelCase } from 'lodash';
import { OpenrpcDocument as OpenRPC } from '@open-rpc/meta-schema';
import { MethodCallValidator, MethodNotFoundError } from '@open-rpc/schema-utils-js';
import * as UnwrappedService from '../wailsjs/go/backend/Handler'
import { jsonrpc as JSONRPCModel } from '../wailsjs/go/backend/Handler'

export const openrpcDocument: OpenRPC = <%= JSON.stringify(openrpcDocument) %>;

// const validator = new MethodCallValidator(openrpcDocument);

export namespace WalletModel {
  <%= types %>
}

export class WalletClient {
  private request(method: string, params?: any[]) {
    return UnwrappedService.SubmitWalletAPIRequest({
      jsonrpc: '2.0',
      id: nanoid(),
      method,
      params,
    }).then((res: JSONRPCModel.Response) => {
      console.log(method, params, res)

      if (res.error) {
        throw new Error(res.error.message + ' - ' + res.error.data.toString())
      }

      const { id, ...rest } = res.result
      return rest;
    });
  }

  <% openrpcDocument.methods.forEach((method) => { %>
  /**
   * <%= method.summary %>
   */

  // tslint:disable-next-line:max-line-length
  public <%= getMethodName(method) %> = (<%= getMethodParams(method) %>: <%= getMethodParamsType(method) %>): <%= getMethodResultType(method) %> => {
    return this.request('<%= method.name %>', params);
  }
  <% }); %>
}
