// Code generated by @open-rpc/generator. DO NOT EDIT.
import { nanoid } from 'nanoid'
import { camelCase } from 'lodash';
import { OpenrpcDocument as OpenRPC } from '@open-rpc/meta-schema';
import { MethodCallValidator, MethodNotFoundError } from '@open-rpc/schema-utils-js';
import * as UnwrappedService from '../wailsjs/go/backend/Handler'
import { jsonrpc as JSONRPCModel } from '../wailsjs/go/backend/Handler'

export const openrpcDocument: OpenRPC = <%= JSON.stringify(openrpcDocument) %>;

// const validator = new MethodCallValidator(openrpcDocument);

export class JSONRPCError extends Error {
  public code: number

  constructor(rpcErr: JSONRPCModel.ErrorDetails) {
    super(rpcErr.data || rpcErr.message)
    this.code = rpcErr.code
  }
}

export namespace WalletModel {
  <%= types %>
}

export class WalletClient {
  private request<T>(method: string, params?: any[]) {
    return UnwrappedService.SubmitWalletAPIRequest({
      jsonrpc: '2.0',
      id: nanoid(),
      method,
      params,
    }).then((res: JSONRPCModel.Response) => {
      if (res.error) {
        throw new JSONRPCError(res.error)
      }

      const { id, ...rest } = (res.result || {})
      return rest as T;
    });
  }

  <% openrpcDocument.methods.forEach((method) => { %>
  /**
   * <%= method.summary %>
   */

  // tslint:disable-next-line:max-line-length
  public <%= getMethodName(method) %> = (<%= getMethodParams(method) %>: WalletModel.<%= getMethodParamsType(method) %>) => {
    return this.request<WalletModel.<%= getMethodResultType(method) %>>('<%= method.name %>', params);
  }
  <% }); %>
}
