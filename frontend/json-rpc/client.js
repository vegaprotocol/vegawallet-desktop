const path = require('path');
const { copy, remove, readFile, writeFile } = require('fs-extra');
const { template } = require('lodash')
// const { getDefaultComponentTemplatePath } = require('@open-rpc/generator/build/components');

const tsTemplate = template(`
// Code generated by @open-rpc/generator. DO NOT EDIT.
import { nanoid } from 'nanoid'
import { OpenrpcDocument as OpenRPC } from '@open-rpc/meta-schema';
import { MethodCallValidator, MethodNotFoundError } from '@open-rpc/schema-utils-js';
import * as UnwrappedService from '../wailsjs/go/backend/Handler'

<%= methodTypings.toString('typescript') %>

const validator = new MethodCallValidator(WalletAPI.openrpcDocument);

export class WalletClient {
  private request(method: string, params?: any[]) {
    const validationErrors = this.validator.validate(methodName, params);
    if ( validationErrors instanceof MethodNotFoundError || validationErrors.length > 0) {
      return Promise.reject(validationErrors);
    }

    return UnwrappedService.SubmitWalletAPIRequest({
      jsonrpc: '2.0',
      id: nanoid(),
      method,
      params,
    });
  }

  <% openrpcDocument.methods.forEach((method) => { %>
  /**
   * <%= method.summary %>
   */
  // tslint:disable-next-line:max-line-length
  public <%= method.name %>: <%= methodTypings.getTypingNames('typescript', method).method %> = (...params) => {
    return this.request('<%= method.name %>', params);
  }
  <% }); %>
}

export const openrpcDocument: OpenRPC = <%= JSON.stringify(openrpcDocument) %>;
`);


const hooks = {
  afterCompileTemplate: [
    async (dest) => {
      await copy(path.join(dest, 'src', 'index.ts'), path.join(dest.replace('/custom/typescript', ''), 'index.ts'))
      await remove(dest.replace('/typescript', ''));
    },
  ],
  templateFiles: {
    typescript: [
      {
        path: 'src/index.ts',
        template: tsTemplate,
      },
    ],
  },
};


module.exports = {
  hooks,
  staticPath: () => __dirname,
}
