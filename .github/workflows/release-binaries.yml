name: Release binaries

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  check-version:
    name: Verify hard-coded version
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Verify hard-coded version
        run: |
          # Filter the content backend/version.go to find the `defaultVersion`
          # constant with its line number. It should look like this:
          #     13: defaultVersion = v0.12.0+dev
          #     ^ the line number in backend/version.go
          #         ^ the constant
          #                          ^ the hard-coded version
          version_info=$(grep -n "defaultVersion\s*=" backend/version.go | xargs)
          echo "Found info: ${version_info}"
          # Extract the version from the version_info found.
          #   - awk '{print $4}'
          #       get the 4th segment in the version_info output, the hard-coded
          #       version.
          #   - xargs
          #       trim the output of spaces and quotes.
          version=$(echo $version_info | awk '{print $4}' | xargs )
          echo "Found version: ${version}"
          # Get the line at which the version is set in version.go
          #   - awk '{print $1}'
          #       get the 1st segment in the version_info output, the line number.
          #   - cut -d: -f1
          #       get rid of the colon (`:`)
          line=$(echo $version_info | awk '{print $1}' | cut -d: -f1)
          echo "Found line: ${line}"
          if [ "$version" = "${{github.ref_name}}" ]; then
            echo "The version matches the tag."
          else
            echo "::error file=backend/version.go,line=$line::The version \"$version\" does not match the tag \"${{github.ref_name}}\". Please, update this version."
            exit 1
          fi

      - name: Verify wails.json version
        run: |
          # Get the line at which the version is set in wails.json
          #   - xargs
          #       trim the output of spaces and quotes.
          #   - awk '{print $1}'
          #       get the 1st segment in the version_info output, the line number.
          #   - cut -d: -f1
          #       get rid of the colon (`:`)
          line=$(grep -n "\"version\"" wails.json | xargs | awk '{print $1}' | cut -d: -f1)
          version=$(cat wails.json | jq .version)
          echo "Found version: ${version}"
          if [ "$version" = "${{github.ref_name}}" ]; then
            echo "The version in wails.json matches the tag."
          else
            echo "::error file=wails.json,line=$line::The version \"$version\" does not match the tag \"${{github.ref_name}}\". Please, update this version."
            exit 1
          fi

      - name: Verify wails.json version
        run: |
          version_info=$(grep -n "\"version\"" wails.json | xargs)
          line=$(echo $version_info | awk '{print $1}' | cut -d: -f1)
          version=$(cat wails.json | jq .version)
          echo "Found version: ${version}"
          if [ "$version" = "${{github.ref_name}}" ]; then
            echo "The version in wails.json matches the tag."
          else
            echo "::error file=wails.json,line=$line::The version \"$version\" does not match the tag \"${{github.ref_name}}\". Please, update this version."
            exit 1
          fi

  release-macos:
    needs: check-version
    name: Release on MacOS ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Set up Node 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
        id: npm

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build binary
        run: |
          hash=$(echo ${{ github.sha }} | cut -b1-8)
          wails build -clean -f -platform darwin/${{ matrix.arch }} -ldflags "-X code.vegaprotocol.io/vegawallet-desktop/backend.VersionHash=$hash"

      - name: Run tests
        if: ${{ matrix.arch == 'amd64' }}
        run: go test -v ./...

      - name: Import DeveloperID Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain: vega
          create-keychain: true
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PASS }}

      - name: Sign binary
        working-directory: build/bin
        # --timestamp
        #     During signing, requests that a timestamp authority server be contacted to authenticate the time of
        #     signing.
        # --deep
        #     When signing a bundle, specifies that nested code content such as helpers, frameworks, and plug-ins,
        #     should be recursively signed in turn.
        # --options runtime
        #     On macOS versions >= 10.14.0, opts signed processes into a hardened runtime environment which includes
        #     runtime code signing enforcement, library validation, hard, kill, and debugging restrictions.
        run: codesign --verbose --sign "${{ secrets.MACOS_CERTIFICATE_IDENTITY_ID }}" --timestamp --options runtime --deep --force Vegawallet.app

      - name: Verify signature
        working-directory: build/bin
        run: codesign --verbose --verify --strict --deep Vegawallet.app

      - name: Bundle binary for notarization
        working-directory: build/bin
        run: /usr/bin/ditto -c -k --keepParent Vegawallet.app "vegawallet-desktop-darwin-${{ matrix.arch }}.zip"

      - name: Store notarization credentials
        run: |
          xcrun notarytool store-credentials vega \
            --apple-id "${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}" \
            --team-id "${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}" \
            --password "${{ secrets.MACOS_NOTARIZATION_PASS }}"

      - name: Notarize app
        working-directory: build/bin
        run: |
          xcrun notarytool submit "vegawallet-desktop-darwin-${{ matrix.arch }}.zip" \
            --keychain-profile vega \
            --output-format json \
            --timeout "90m" \
            --wait

      - name: Staple app
        working-directory: build/bin
        run: xcrun stapler staple Vegawallet.app

      - name: Delete old archive
        working-directory: build/bin
        run: rm -rf vegawallet-desktop-darwin-${{ matrix.arch }}.zip

      - name: Bundle binary in archive for distribution
        working-directory: build/bin
        run: /usr/bin/ditto -c -k --keepParent Vegawallet.app "vegawallet-desktop-darwin-${{ matrix.arch }}.zip"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-windows:
        needs: check-version
    name: Release on Windows ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      matrix:
        arch:
          - amd64
          - arm64
    steps:
      - name: Set up Node 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
        id: npm

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
        id: go

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build binary
        run: |
          $hash= "${{ github.sha }}".substring(0,8)
          wails build -f -platform windows/${{ matrix.arch }} -ldflags "-X code.vegaprotocol.io/vegawallet-desktop/backend.VersionHash=$hash"

      - name: Run tests
        if: ${{ matrix.arch == 'amd64' }}
        run: go test -v ./...

      - name: Import signing certificate
        run: |
          echo "${{ secrets.WINDOWS_CERTIFICATE }}" > certificate.pfx
          Certutil -f -p "${{ secrets.WINDOWS_CERTIFICATE_PASS }}" -importpfx certificate.pfx

      - name: Sign binary
        uses: Dana-Prajea/code-sign-action@98c79121b376beab8d6a9484f445089db4461bca
        with:
          certificate: ${{ secrets.WINDOWS_CERTIFICATE }}
          password: ${{ secrets.WINDOWS_CERTIFICATE_PASS }}
          certificatesha1: ${{ secrets.WINDOWS_CERTIFICATE_HASH }}
          folder: build/bin
          timestampUrl: "http://timestamp.sectigo.com"

      - name: Bundle binary in archive
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: build/bin
          filename: vegawallet-desktop-windows-${{ matrix.arch }}.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/bin/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
